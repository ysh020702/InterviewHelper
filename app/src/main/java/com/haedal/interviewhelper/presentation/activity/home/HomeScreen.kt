@file:Suppress("UNUSED_EXPRESSION")

package com.haedal.interviewhelper.presentation.activity.home


import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.graphics.Color
import com.haedal.interviewhelper.presentation.theme.PrimaryButton
import com.haedal.interviewhelper.presentation.theme.Color03

import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ExitToApp
import androidx.compose.material.icons.filled.QuestionAnswer
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.lifecycle.viewmodel.compose.viewModel
import com.haedal.interviewhelper.domain.helpfunction.vibrate
import com.haedal.interviewhelper.presentation.theme.Color04
import com.haedal.interviewhelper.presentation.theme.InterviewHelperTheme
import com.haedal.interviewhelper.presentation.theme.White
import com.haedal.interviewhelper.presentation.viewmodel.HomeViewModel
import com.haedal.interviewhelper.presentation.viewmodel.UserViewModel

@Composable
fun HomeScreen(
    userName: String,
    onStartInterview: (String) -> Unit,
    onLogout: () -> Unit,
    dailyQuestion: String = "",
    feedbackList: List<Pair<String, String>>,
    contentList: List<Pair<String, String>>,
    recentQuestions: List<String>,
    onDeleteQuestion: (String) -> Unit,
    onShowQuestion: (String) -> Unit,
    homeViewModel: HomeViewModel
) {
    val selected = homeViewModel.selectedQuestion
    val context = LocalContext.current


    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(White)
            .padding(horizontal = 24.dp, vertical = 48.dp)
    ) {
        // ÏÉÅÎã® Ïù∏ÏÇ¨ + Î°úÍ∑∏ÏïÑÏõÉ
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 8.dp, bottom = 16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "$userName Îãò, ÏïàÎÖïÌïòÏÑ∏Ïöî üëã",
                style = MaterialTheme.typography.bodyLarge.copy(
                    fontWeight = FontWeight.SemiBold
                )
            )
            IconButton(onClick = onLogout) {
                Icon(Icons.AutoMirrored.Filled.ExitToApp, contentDescription = "Î°úÍ∑∏ÏïÑÏõÉ", tint = Color.Gray)
            }
        }

        LazyColumn(
            modifier = Modifier.weight(1f),
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            item {
                SectionTitle("Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏßàÎ¨∏")
                SelectableCardSection(
                    content = dailyQuestion,
                    isSelected = selected == dailyQuestion,
                    onSelect = {
                        vibrate(context)
                        homeViewModel.toggleSelection(dailyQuestion)
                    }
                )
            }
            item {
                SectionTitle("Ïù∏Í∏∞Í∞Ä ÎßéÏùÄ ÏßàÎ¨∏")
                Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                    feedbackList.forEach { (question, _) ->
                        SelectableCardSection(
                            content = question,
                            isSelected = selected == question,
                            onSelect = {
                                vibrate(context)
                                homeViewModel.toggleSelection(question)
                            }
                        )
                    }
                }
            }

            item {
                SectionTitle("ÏµúÍ∑ºÏóê ÎãµÎ≥ÄÌïú ÏßàÎ¨∏")
                Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                    recentQuestions.forEach { question ->
                        DeleteableCardSection(
                            content = question,
                            isSelected = selected == question,
                            onSelect = {
                                //TODO: resultActivity ÎùÑÏö∞Í∏∞
                                vibrate(context)
                                onShowQuestion(question)
                            },
                            onDelete = { onDeleteQuestion(question) }
                        )
                    }
                }
            }

            item {
                SectionTitle("Ï∂îÏ≤ú ÏΩòÌÖêÏ∏†")
                Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                    contentList.forEach { (title, description) ->
                        ContentCard(title = title, description = description)
                    }
                }
            }
        }

        PrimaryButton(
            text = "Ïù∏ÌÑ∞Î∑∞ ÏãúÏûëÌïòÍ∏∞",
            onClick = {
                selected?.let { onStartInterview(it) }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 16.dp),
            containerColor = Color03,
            contentColor= White,
            enabled = selected != null
        )
    }
}

@Composable
fun SectionTitle(text: String) {
    Text(
        text = text,
        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
        modifier = Modifier.padding(vertical = 8.dp)
    )
}

@Composable
fun SelectableCardSection(
    content: String,
    isSelected: Boolean,
    onSelect: () -> Unit
) {
    Card(
        shape = RoundedCornerShape(12.dp),
        border = BorderStroke(2.dp, if (isSelected) Color03 else Color.Gray),
        colors = CardDefaults.cardColors(
            containerColor = if (isSelected) Color03.copy(alpha = 0.2f) else Color.White
        ),
        modifier = Modifier
            .fillMaxWidth()
            .combinedClickable(
                onClick = {}, // ÏùºÎ∞ò ÌÅ¥Î¶≠ Î¨¥Ïãú
                onLongClick = onSelect // Í∏∏Í≤å ÎàåÎü¨ÏÑúÎßå ÏÑ†ÌÉù
            )
    ) {
        Row(modifier = Modifier.padding(16.dp)) {
            Icon(Icons.Default.QuestionAnswer, contentDescription = null, tint = Color04)
            Spacer(Modifier.width(12.dp))
            Text(
                text = content,
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.weight(1f)
            )
        }
    }
}

@Composable
fun DeleteableCardSection(
    content: String,
    isSelected: Boolean,
    onSelect: () -> Unit,
    onDelete: (() -> Unit)? = null
) {
    var showDialog by remember { mutableStateOf(false) }

    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            title = { Text("ÏÇ≠Ï†ú ÌôïÏù∏") },
            text = { Text("Ïù¥ ÏßàÎ¨∏ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\"$content\"") },
            confirmButton = {
                TextButton(onClick = {
                    showDialog = false
                    onDelete?.invoke()
                }) {
                    Text("ÏÇ≠Ï†ú")
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("Ï∑®ÏÜå")
                }
            }
        )
    }
    Card(
        shape = RoundedCornerShape(12.dp),
        border = BorderStroke(2.dp, if (isSelected) Color03 else Color.Gray),
        colors = CardDefaults.cardColors(
            containerColor = if (isSelected) Color03.copy(alpha = 0.2f) else Color.White
        ),
        modifier = Modifier
            .fillMaxWidth()
            .combinedClickable(
                onClick = {onSelect}, // ÏùºÎ∞ò ÌÅ¥Î¶≠ Î¨¥Ïãú
                onLongClick = {
                    showDialog = true // Í∏∏Í≤å ÎàåÎ†ÄÏùÑ Îïå Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ï∂úÎ†•
                }
            )
    ) {
        Row(modifier = Modifier.padding(16.dp)) {
            Icon(Icons.Default.QuestionAnswer, contentDescription = null, tint = Color04)
            Spacer(Modifier.width(12.dp))
            Text(
                text = content,
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.weight(1f)
            )
        }
    }
}



@Composable
fun FeedbackCard(question: String, feedback: String) {
    Card(
        shape = RoundedCornerShape(12.dp),
        border = BorderStroke(2.dp, Color.Gray),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = question,
                style = MaterialTheme.typography.bodyMedium
            )
            Spacer(Modifier.height(8.dp))
            Text(
                text = feedback,
                style = MaterialTheme.typography.bodySmall.copy(color = Color.Gray)
            )
        }
    }
}

@Composable
fun ContentCard(title: String, description: String) {
    Card(
        shape = RoundedCornerShape(12.dp),
        border = BorderStroke(2.dp, Color.Gray),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(Modifier.height(4.dp))
            Text(
                text = description,
                style = MaterialTheme.typography.bodySmall.copy(color = Color.Gray)
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun HomePreview() {
    // ÎçîÎØ∏ Î∑∞Î™®Îç∏ Í∞ùÏ≤¥ (Í∏∞Îä• ÏóÜÏùå)
    val dummyViewModel = object : HomeViewModel() {}

    InterviewHelperTheme {
        HomeScreen(
            userName = "ÏñëÏäπÌôò",
            onStartInterview = {},
            onLogout = {},
            dailyQuestion = "ÏûêÏã†Ïùò Í∞ïÏ†êÏùÑ ÎßêÌï¥Î≥¥ÏÑ∏Ïöî.",
            feedbackList = listOf(
                "ÏûêÏã†Ïùò Îã®Ï†êÏùÑ ÎßêÌï¥Î≥¥ÏÑ∏Ïöî." to "ÎßêÌà¨Í∞Ä ÏÜåÏã¨ÌïòÍ≤å Îì§Î¶¥ Ïàò ÏûàÏñ¥Ïöî. Ï°∞Í∏à Îçî ÌôïÏã† ÏûàÍ≤å ÎßêÌïòÎ©¥ Ï¢ãÏïÑÏöî.",
                "ÏÑ±Í≥µÏ†ÅÏù∏ ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÌóòÏùÑ ÎßêÌï¥Î≥¥ÏÑ∏Ïöî." to "Î™©Ìëú Ï§ëÏã¨ÏúºÎ°ú Ï†ïÎ¶¨ÌïòÎ©¥ Îçî ÏÑ§ÎìùÎ†• ÏûàÏñ¥Ïöî."
            ),
            contentList = listOf(
                "Î™®Î≤î ÎãµÎ≥Ä Îì£Í∏∞" to "Îã§Î•∏ ÏÇ¨ÎûåÎì§Ïùò Ïã§Ï†ú Ïù∏ÌÑ∞Î∑∞ ÎãµÎ≥ÄÏùÑ Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî.",
                "AI ÌîºÎìúÎ∞± ÏòàÏãú Î≥¥Í∏∞" to "AIÍ∞Ä Ïã§Ï†úÎ°ú Ïñ¥ÎñªÍ≤å ÌîºÎìúÎ∞±ÏùÑ Ï£ºÎäîÏßÄ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî."
            ),
            recentQuestions = listOf(
                "ÏµúÍ∑ºÏóê ÎèÑÏ†ÑÌïú Í≤ΩÌóòÏùÄ?",
                "Î¶¨ÎçîÏã≠ Í≤ΩÌóòÏù¥ ÏûàÎÇòÏöî?",
                "ÌòëÏóÖ Ï§ë Í∞àÎì±ÏùÑ Ïñ¥ÎñªÍ≤å Ìï¥Í≤∞ÌñàÎÇòÏöî?"
            ),
            homeViewModel = dummyViewModel,
            onDeleteQuestion = {}, // PreviewÏóêÏÑúÎäî Îπà ÎûåÎã§
            onShowQuestion = {}  // PreviewÏóêÏÑúÎäî Îπà ÎûåÎã§
        )
    }
}
